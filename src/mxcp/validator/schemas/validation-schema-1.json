{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://mxcp.raw-labs.com/schemas/validation-schema-1.json",
  "title": "MXCP Validation Schema",
  "description": "Schema for defining input and output validation in MXCP",
  "type": "object",
  "properties": {
    "input": {
      "type": "object",
      "description": "Input parameter definitions",
      "properties": {
        "parameters": {
          "type": "array",
          "description": "List of input parameters",
          "items": {
            "$ref": "#/definitions/parameterSchema"
          }
        }
      },
      "additionalProperties": false
    },
    "output": {
      "$ref": "#/definitions/typeSchema",
      "description": "Output type definition"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "baseTypeDefinition": {
      "type": "object",
      "description": "Base type definition with all type-related properties",
      "required": ["type"],
      "properties": {
        "type": {
          "$ref": "#/definitions/typeEnum"
        },
        "format": {
          "$ref": "#/definitions/formatEnum"
        },
        "sensitive": {
          "type": "boolean",
          "description": "Whether the type contains sensitive data that should be redacted in logs and filtered by policies",
          "default": false
        },
        "minLength": {
          "type": "integer",
          "minimum": 0,
          "description": "Minimum string length"
        },
        "maxLength": {
          "type": "integer",
          "minimum": 0,
          "description": "Maximum string length"
        },
        "minimum": {
          "type": "number",
          "description": "Minimum value for numbers or integers"
        },
        "maximum": {
          "type": "number",
          "description": "Maximum value for numbers or integers"
        },
        "exclusiveMinimum": {
          "type": "number",
          "description": "Exclusive minimum value for numbers or integers"
        },
        "exclusiveMaximum": {
          "type": "number",
          "description": "Exclusive maximum value for numbers or integers"
        },
        "multipleOf": {
          "type": "number",
          "description": "Value must be a multiple of this for numbers or integers"
        },
        "minItems": {
          "type": "integer",
          "minimum": 0,
          "description": "Minimum number of array items"
        },
        "maxItems": {
          "type": "integer",
          "minimum": 0,
          "description": "Maximum number of array items"
        },
        "uniqueItems": {
          "type": "boolean",
          "description": "Whether array items must be unique"
        },
        "items": {
          "$ref": "#/definitions/typeSchema",
          "description": "Schema for items if type is array"
        },
        "properties": {
          "type": "object",
          "description": "Schema for object properties if type is object",
          "additionalProperties": {
            "$ref": "#/definitions/typeSchema"
          }
        },
        "required": {
          "type": "array",
          "description": "List of required fields if type is object",
          "items": {
            "type": "string"
          }
        },
        "additionalProperties": {
          "type": "boolean",
          "description": "Whether to allow additional properties not defined in the schema. Defaults to true if not specified"
        }
      }
    },
    "typeSchema": {
      "allOf": [
        {
          "$ref": "#/definitions/baseTypeDefinition"
        },
        {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "What this type represents"
            },
            "enum": {
              "type": "array",
              "description": "List of allowed values",
              "items": {},
              "minItems": 1
            },
            "examples": {
              "type": "array",
              "description": "Example values for this type",
              "items": {}
            }
          }
        }
      ]
    },
    "parameterSchema": {
      "allOf": [
        {
          "$ref": "#/definitions/baseTypeDefinition"
        },
        {
          "type": "object",
          "description": "Parameter-specific properties",
          "required": ["name"],
          "properties": {
            "name": {
              "type": "string",
              "description": "Parameter name",
              "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
              "minLength": 1
            },
            "description": {
              "type": "string",
              "description": "What this parameter represents"
            },
            "default": {
              "description": "Optional default value if none is provided"
            }
          }
        }
      ]
    },
    "typeEnum": {
      "type": "string",
      "enum": ["string", "number", "integer", "boolean", "array", "object"],
      "description": "Supported data types"
    },
    "formatEnum": {
      "type": "string",
      "enum": ["email", "uri", "date", "time", "date-time", "duration", "timestamp"],
      "description": "Supported string formats"
    }
  }
} 
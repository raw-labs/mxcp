{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MXCP Common Type Definitions",
  "description": "Common type definitions shared across MXCP tool, resource, and prompt schemas",
  
  "definitions": {
    "typeDefinition": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["string", "number", "integer", "boolean", "array", "object"],
          "description": "The data type of the value."
        },
        "format": {
          "type": "string",
          "enum": ["email", "uri", "date", "time", "date-time", "duration", "timestamp"],
          "description": "Expected format for string values."
        },
        "sensitive": {
          "type": "boolean",
          "description": "Whether this field contains sensitive data that should be redacted in logs and filtered by policies.",
          "default": false
        },
        "minLength": { 
          "type": "integer", 
          "minimum": 0, 
          "description": "Minimum string length." 
        },
        "maxLength": { 
          "type": "integer", 
          "minimum": 0, 
          "description": "Maximum string length." 
        },
        "minimum": {
          "type": "number",
          "description": "Minimum value for numbers or integers."
        },
        "maximum": {
          "type": "number",
          "description": "Maximum value for numbers or integers."
        },
        "exclusiveMinimum": {
          "type": "number",
          "description": "Exclusive minimum value for numbers or integers."
        },
        "exclusiveMaximum": {
          "type": "number",
          "description": "Exclusive maximum value for numbers or integers."
        },
        "multipleOf": {
          "type": "number",
          "description": "Value must be a multiple of this for numbers or integers."
        },
        "minItems": { 
          "type": "integer", 
          "minimum": 0, 
          "description": "Minimum number of array items." 
        },
        "maxItems": { 
          "type": "integer", 
          "minimum": 0, 
          "description": "Maximum number of array items." 
        },
        "uniqueItems": {
          "type": "boolean",
          "description": "Whether array items must be unique."
        },
        "items": {
          "$ref": "#/definitions/typeDefinition",
          "description": "Schema for items if type is array."
        },
        "properties": {
          "type": "object",
          "description": "Schema for object properties if type is object.",
          "additionalProperties": {
            "$ref": "#/definitions/typeDefinition"
          }
        },
        "required": {
          "type": "array",
          "description": "List of required fields if type is object.",
          "items": { "type": "string" }
        },
        "additionalProperties": {
          "type": "boolean",
          "description": "Whether to allow additional properties not defined in the schema. Defaults to true if not specified."
        }
      }
    },

    "paramDefinition": {
      "type": "object",
      "required": ["name", "type", "description"],
      "properties": {
        "name": { 
          "type": "string", 
          "description": "Parameter name.",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
          "minLength": 1
        },
        "description": { 
          "type": "string", 
          "description": "What this parameter represents." 
        },
        "default": { 
          "description": "Optional default value if none is provided." 
        },
        "examples": {
          "type": "array",
          "description": "Example values for this parameter.",
          "items": {}
        },
        "enum": {
          "type": "array",
          "description": "List of allowed values.",
          "items": {}
        }
      },
      "allOf": [
        { "$ref": "#/definitions/typeDefinition" }
      ]
    },

    "policySet": {
      "type": "object",
      "description": "Policy definitions for endpoint access control and data filtering.",
      "properties": {
        "input": {
          "type": "array",
          "description": "Input policies evaluated before endpoint execution.",
          "items": { "$ref": "#/definitions/policyDefinition" }
        },
        "output": {
          "type": "array", 
          "description": "Output policies evaluated after endpoint execution.",
          "items": { "$ref": "#/definitions/policyDefinition" }
        }
      },
      "additionalProperties": false
    },

    "policyDefinition": {
      "type": "object",
      "required": ["condition", "action"],
      "description": "A single policy rule definition.",
      "properties": {
        "condition": {
          "type": "string",
          "description": "CEL expression that determines when this policy applies."
        },
        "action": {
          "type": "string",
          "enum": ["deny", "filter_fields", "mask_fields", "filter_sensitive_fields"],
          "description": "Action to take when the condition is true."
        },
        "reason": {
          "type": "string",
          "description": "Human-readable explanation for the policy action."
        },
        "fields": {
          "type": "array",
          "items": { "type": "string" },
          "description": "List of field names for filter_fields and mask_fields actions."
        }
      },
      "additionalProperties": false
    }
  }
} 